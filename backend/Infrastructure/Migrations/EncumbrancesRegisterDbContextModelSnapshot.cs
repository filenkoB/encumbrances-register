// <auto-generated />
using System;
using Infrastructure.EF.PostgreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(EncumbrancesRegisterDbContext))]
    partial class EncumbrancesRegisterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Building")
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Corps")
                        .HasColumnType("integer");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Flat")
                        .HasColumnType("integer");

                    b.Property<string>("Index")
                        .HasColumnType("text");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StreetId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IdentificatorId")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PassportInfoId")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("IdentificatorId")
                        .IsUnique();

                    b.HasIndex("PassportInfoId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.AlienationLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AlienationLimits");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Authority", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Authorities");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.BasisDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Issuer")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BasisDocuments");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.CurrencyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<char>("Sign")
                        .HasColumnType("character(1)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyTypes");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Encumbrance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlienationLimitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasisDocumentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DebtorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("KindId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEncumbranceOccurrenceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegistrationTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TermsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TierId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeDescription")
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlienationLimitId");

                    b.HasIndex("BasisDocumentId")
                        .IsUnique();

                    b.HasIndex("DebtorId")
                        .IsUnique();

                    b.HasIndex("KindId");

                    b.HasIndex("RegistrationTypeId");

                    b.HasIndex("TermsId")
                        .IsUnique();

                    b.HasIndex("TierId")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Encumbrances");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.EncumbranceKind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EncumbranceKinds");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.EncumbranceParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsForeigner")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EncumbranceParticipants");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.EncumbranceTerms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalTerms")
                        .HasColumnType("text");

                    b.Property<Guid>("CurrencyTypeId")
                        .HasColumnType("uuid");

                    b.Property<float>("ObligationAmount")
                        .HasColumnType("real");

                    b.Property<DateTime>("TermTo")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.ToTable("EncumbranceTerms");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.EncumbranceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EncumbranceTypes");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.ExtractGettingActionsHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EncumbranceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaymentCertificateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StatementId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EncumbranceId");

                    b.HasIndex("IssuerId");

                    b.ToTable("ExtractGettingActionsHistory");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Identificator", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<Guid>("RefreshTokenId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Login");

                    b.HasIndex("RefreshTokenId")
                        .IsUnique();

                    b.ToTable("Identificators");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Index", b =>
                {
                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("IndexCode")
                        .HasColumnType("text");

                    b.HasKey("CityId");

                    b.ToTable("Indices");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.PassportInfo", b =>
                {
                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<string>("AuthorityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasKey("PassportNumber");

                    b.HasIndex("AuthorityId");

                    b.ToTable("PassportInfos");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.RegistrationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RegistrationTypes");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Registrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IdentificatorId")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PassportInfoId")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("IdentificatorId")
                        .IsUnique();

                    b.HasIndex("PassportInfoId")
                        .IsUnique();

                    b.ToTable("Registrators");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.RegistratorActionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RegistratorActionTypes");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.RegistratorEncumbranceActionsHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RegistratorActionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegistratorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatementId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegistratorActionTypeId");

                    b.HasIndex("RegistratorId");

                    b.ToTable("RegistratorEncumbranceActionsHistory");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Street", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.TaxpayerAccountCardNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AbsenceReason")
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TaxpayerAccountCardNumbers");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Authorityid")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentificatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsForeigner")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportInfoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<Guid>("TaxpayerAccountCardNumberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("Authorityid");

                    b.HasIndex("IdentificatorId")
                        .IsUnique();

                    b.HasIndex("PassportInfoId")
                        .IsUnique();

                    b.HasIndex("TaxpayerAccountCardNumberId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Address", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_City_Addresses")
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Country_Addresses")
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_District_Addresses")
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.Region", "Region")
                        .WithMany("Addresses")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Region_Addresses")
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId")
                        .HasConstraintName("FK_Street_Addresses")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Region");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Admin", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.Authority", "Authority")
                        .WithMany("Admins")
                        .HasForeignKey("AuthorityId")
                        .HasConstraintName("FK_Authority_Admins")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.PostgreSQL.Entities.Identificator", "Identificator")
                        .WithOne("Admin")
                        .HasForeignKey("Domain.PostgreSQL.Entities.Admin", "IdentificatorId")
                        .HasConstraintName("FK_Admin_Identificator")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.PostgreSQL.Entities.PassportInfo", "PassportInfo")
                        .WithOne("Admin")
                        .HasForeignKey("Domain.PostgreSQL.Entities.Admin", "PassportInfoId")
                        .HasConstraintName("FK_Admin_PassportInfo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Authority");

                    b.Navigation("Identificator");

                    b.Navigation("PassportInfo");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Authority", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.Address", "Address")
                        .WithOne("Authority")
                        .HasForeignKey("Domain.PostgreSQL.Entities.Authority", "AddressId")
                        .HasConstraintName("FK_Authority_Address")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.City", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.District", "District")
                        .WithMany("Cities")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_District_Cities")
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.District", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Region_Districts")
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Encumbrance", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.AlienationLimit", "AlienationLimit")
                        .WithMany("Encumbrances")
                        .HasForeignKey("AlienationLimitId")
                        .HasConstraintName("FK_AlienationLimit_Encumbrances")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.BasisDocument", "BasisDocument")
                        .WithOne("Encumbrance")
                        .HasForeignKey("Domain.PostgreSQL.Entities.Encumbrance", "BasisDocumentId")
                        .HasConstraintName("FK_Encumbrance_BasisDocument")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.EncumbranceParticipant", "Debtor")
                        .WithOne("EncumbranceToDebtor")
                        .HasForeignKey("Domain.PostgreSQL.Entities.Encumbrance", "DebtorId")
                        .HasConstraintName("FK_Encumbrance_Debtor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.EncumbranceKind", "EncumbranceKind")
                        .WithMany("Encumbrances")
                        .HasForeignKey("KindId")
                        .HasConstraintName("FK_EncumbranceKind_Encumbrances")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.RegistrationType", "RegistrationType")
                        .WithMany("Encumbrances")
                        .HasForeignKey("RegistrationTypeId")
                        .HasConstraintName("FK_RegistrationType_Encumbrances")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.EncumbranceTerms", "EncumbranceTerms")
                        .WithOne("Encumbrance")
                        .HasForeignKey("Domain.PostgreSQL.Entities.Encumbrance", "TermsId")
                        .HasConstraintName("FK_Encumbrance_Terms")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.EncumbranceParticipant", "Tier")
                        .WithOne("EncumbranceToTier")
                        .HasForeignKey("Domain.PostgreSQL.Entities.Encumbrance", "TierId")
                        .HasConstraintName("FK_Encumbrance_Tier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.EncumbranceType", "EncumbranceType")
                        .WithMany("Encumbrances")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_EncumbranceType_Encumbrances")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.User", null)
                        .WithMany("Encumbrances")
                        .HasForeignKey("UserId");

                    b.Navigation("AlienationLimit");

                    b.Navigation("BasisDocument");

                    b.Navigation("Debtor");

                    b.Navigation("EncumbranceKind");

                    b.Navigation("EncumbranceTerms");

                    b.Navigation("EncumbranceType");

                    b.Navigation("RegistrationType");

                    b.Navigation("Tier");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.EncumbranceTerms", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.CurrencyType", "CurrencyType")
                        .WithMany("EncumbranceTerms")
                        .HasForeignKey("CurrencyTypeId")
                        .HasConstraintName("FK_CurrencyType_EncumbranceTerms")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyType");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.ExtractGettingActionsHistory", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.Encumbrance", "Encumbrance")
                        .WithMany("ExtractGettingActions")
                        .HasForeignKey("EncumbranceId")
                        .HasConstraintName("FK_Encumbrance_ExtractGettingActions")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.Registrator", "IssuerRegistrator")
                        .WithMany("ExtractGettingActions")
                        .HasForeignKey("IssuerId")
                        .HasConstraintName("FK_Registrator_ExtractGettingActions")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.User", "IssuerUser")
                        .WithMany("ExtractGettingActions")
                        .HasForeignKey("IssuerId")
                        .HasConstraintName("FK_User_ExtractGettingActions")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Encumbrance");

                    b.Navigation("IssuerRegistrator");

                    b.Navigation("IssuerUser");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Identificator", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.RefreshToken", "RefreshToken")
                        .WithOne("Identificator")
                        .HasForeignKey("Domain.PostgreSQL.Entities.Identificator", "RefreshTokenId")
                        .HasConstraintName("FK_RefreshToken_Identificator")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Index", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.City", "City")
                        .WithMany("Indices")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_City_Indices")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.PassportInfo", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.Authority", "Authority")
                        .WithMany("PassportInfos")
                        .HasForeignKey("AuthorityId")
                        .HasConstraintName("FK_Authority_PassportInfos")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Authority");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Region", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Country_Regions")
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Registrator", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.Authority", "Authority")
                        .WithMany("Registrators")
                        .HasForeignKey("AuthorityId")
                        .HasConstraintName("FK_Authority_Registrators")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.PostgreSQL.Entities.Identificator", "Identificator")
                        .WithOne("Registrator")
                        .HasForeignKey("Domain.PostgreSQL.Entities.Registrator", "IdentificatorId")
                        .HasConstraintName("FK_Registrator_Identificator")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.PostgreSQL.Entities.PassportInfo", "PassportInfo")
                        .WithOne("Registrator")
                        .HasForeignKey("Domain.PostgreSQL.Entities.Registrator", "PassportInfoId")
                        .HasConstraintName("FK_Registrator_PassportInfo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Authority");

                    b.Navigation("Identificator");

                    b.Navigation("PassportInfo");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.RegistratorEncumbranceActionsHistory", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.RegistratorActionType", "RegistratorActionType")
                        .WithMany("RegistratorEncumbranceActions")
                        .HasForeignKey("RegistratorActionTypeId")
                        .HasConstraintName("FK_RegistrationActionType_RegistratorEAHistory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.Registrator", "Registrator")
                        .WithMany("RegistratorEncumbranceActions")
                        .HasForeignKey("RegistratorId")
                        .HasConstraintName("FK_Registrator_RegistratorEncumbranceActions")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Registrator");

                    b.Navigation("RegistratorActionType");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Street", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.City", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_City_Streets")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.User", b =>
                {
                    b.HasOne("Domain.PostgreSQL.Entities.Address", "Address")
                        .WithOne("User")
                        .HasForeignKey("Domain.PostgreSQL.Entities.User", "AddressId")
                        .HasConstraintName("FK_User_Address")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.Authority", "Authority")
                        .WithMany("Users")
                        .HasForeignKey("Authorityid")
                        .HasConstraintName("FK_Authority_Users")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.PostgreSQL.Entities.Identificator", "Identificator")
                        .WithOne("User")
                        .HasForeignKey("Domain.PostgreSQL.Entities.User", "IdentificatorId")
                        .HasConstraintName("FK_User_Identificator")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.PassportInfo", "PassportInfo")
                        .WithOne("User")
                        .HasForeignKey("Domain.PostgreSQL.Entities.User", "PassportInfoId")
                        .HasConstraintName("FK_User_PassportInfo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PostgreSQL.Entities.TaxpayerAccountCardNumber", "TaxpayerAccountCardNumber")
                        .WithOne("User")
                        .HasForeignKey("Domain.PostgreSQL.Entities.User", "TaxpayerAccountCardNumberId")
                        .HasConstraintName("FK_User_TaxpayerAccountCardNumber");

                    b.Navigation("Address");

                    b.Navigation("Authority");

                    b.Navigation("Identificator");

                    b.Navigation("PassportInfo");

                    b.Navigation("TaxpayerAccountCardNumber");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Address", b =>
                {
                    b.Navigation("Authority");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.AlienationLimit", b =>
                {
                    b.Navigation("Encumbrances");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Authority", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("PassportInfos");

                    b.Navigation("Registrators");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.BasisDocument", b =>
                {
                    b.Navigation("Encumbrance");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Indices");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.CurrencyType", b =>
                {
                    b.Navigation("EncumbranceTerms");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.District", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Encumbrance", b =>
                {
                    b.Navigation("ExtractGettingActions");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.EncumbranceKind", b =>
                {
                    b.Navigation("Encumbrances");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.EncumbranceParticipant", b =>
                {
                    b.Navigation("EncumbranceToDebtor");

                    b.Navigation("EncumbranceToTier");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.EncumbranceTerms", b =>
                {
                    b.Navigation("Encumbrance");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.EncumbranceType", b =>
                {
                    b.Navigation("Encumbrances");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Identificator", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Registrator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.PassportInfo", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Registrator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.RefreshToken", b =>
                {
                    b.Navigation("Identificator");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Region", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.RegistrationType", b =>
                {
                    b.Navigation("Encumbrances");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Registrator", b =>
                {
                    b.Navigation("ExtractGettingActions");

                    b.Navigation("RegistratorEncumbranceActions");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.RegistratorActionType", b =>
                {
                    b.Navigation("RegistratorEncumbranceActions");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.Street", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.TaxpayerAccountCardNumber", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.PostgreSQL.Entities.User", b =>
                {
                    b.Navigation("Encumbrances");

                    b.Navigation("ExtractGettingActions");
                });
#pragma warning restore 612, 618
        }
    }
}
